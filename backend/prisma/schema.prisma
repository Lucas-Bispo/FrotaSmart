// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  cpf      String  @unique
  senha    String
  isAdmin  Boolean @default(false)
}

model Secretaria {
  id         Int         @id @default(autoincrement())
  nome       String
  motoristas Motorista[]
  veiculos   Veiculo[]
}

model Motorista {
  id           Int         @id @default(autoincrement())
  cpf          String      @unique
  nome         String
  cnh          String
  secretaria   Secretaria  @relation(fields: [secretariaId], references: [id])
  secretariaId Int
  locacoes     Locacao[]   @relation("MotoristaLocacao")
}

model Veiculo {
  id           Int         @id @default(autoincrement())
  placa        String      @unique
  tipo         String
  secretaria   Secretaria  @relation(fields: [secretariaId], references: [id])
  secretariaId Int
  locacoes     Locacao[]   @relation("VeiculoLocacao")
  manutencoes  Manutencao[] @relation("VeiculoManutencao") // Campo oposto adicionado
}

model Locacao {
  id          Int       @id @default(autoincrement())
  veiculoId   Int
  motoristaId Int
  dataInicio  DateTime
  dataFim     DateTime?
  destino     String
  km          Float?
  veiculo     Veiculo   @relation("VeiculoLocacao", fields: [veiculoId], references: [id])
  motorista   Motorista @relation("MotoristaLocacao", fields: [motoristaId], references: [id])
}

model Manutencao {
  id          Int      @id @default(autoincrement())
  veiculoId   Int
  data        DateTime
  tipo        String   // Ex.: "Troca de óleo", "Reparo de freio"
  descricao   String?
  custo       Float?
  veiculo     Veiculo  @relation("VeiculoManutencao", fields: [veiculoId], references: [id]) // Nome da relação ajustado
}